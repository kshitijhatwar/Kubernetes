###Disable swap:

sudo swapoff -a
sudo sed -i '/ swap / s/^/#/' /etc/fstab

#---------------------------------------------------------------------------------------

###Enable required kernel modules
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

#-----------------------------------------------------------------

###Set sysctl params
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

sudo sysctl --system

# Verify modules and sysctl settings
lsmod | grep br_netfilter
lsmod | grep overlay
sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward

#-----------------------------------------------------------------------------------------------------------------

###Install containerd:
# 1. Download the latest binary
curl -LO https://github.com/containerd/containerd/releases/download/v2.1.3/containerd-2.1.3-linux-amd64.tar.gz

# 2. Extract to /usr/local (containerd, ctr, etc.)
sudo tar Cxzvf /usr/local containerd-2.1.3-linux-amd64.tar.gz

# 3. Download the systemd service file
curl -LO https://raw.githubusercontent.com/containerd/containerd/main/containerd.service

# 4. Move service file to systemd directory
sudo mkdir -p /usr/local/lib/systemd/system/
sudo mv containerd.service /usr/local/lib/systemd/system/

# 5. Generate default config & enable systemd cgroup driver
sudo mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml

# 6. Reload systemd, enable & start containerd
sudo systemctl daemon-reload
sudo systemctl enable --now containerd

#------------------------------------------------------------------------------------------------

###Install runc(need to make latest):

curl -LO https://github.com/opencontainers/runc/releases/download/v1.1.12/runc.amd64
sudo install -m 755 runc.amd64 /usr/local/sbin/runc

#--------------------------------------------------------------------------------------------------------

###Install CNI Plugin:
# 1. Download the latest CNI plugins
curl -LO https://github.com/containernetworking/plugins/releases/download/v1.7.1/cni-plugins-linux-amd64-v1.7.1.tgz

# 2. Create the target directory
sudo mkdir -p /opt/cni/bin

# 3. Extract the binary plugins into it
sudo tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.7.1.tgz

#--------------------------------------------------------------------

###Install k8:

sudo apt-get update  && sudo apt-get install -y apt-transport-https ca-certificates curl gpg
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key   | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list > /dev/null
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl
kubeadm version
kubelet --version
kubectl version --client

#-------------------------------------------------------------------------------

###Configure crictl to work with containerd

sudo crictl config runtime-endpoint unix:///var/run/containerd/containerd.sock

#------------------------------------------------------------------------------------

###Initilize the cluster
sudo kubeadm init \
  --apiserver-advertise-address=10.0.3.142 \
  --pod-network-cidr=10.244.0.0/16 \
  --control-plane-endpoint=10.0.3.142

#-----------------------------------------------------------------------------------------

###Give cluster admin access to a user.
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

#------------------------------------------------------------

### Install Calico operator and CRDs
kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.30.2/manifests/operator-crds.yaml
kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.30.2/manifests/tigera-operator.yaml

# Download the latest custom-resources
curl -LO https://raw.githubusercontent.com/projectcalico/calico/v3.30.2/manifests/custom-resources.yaml

# Deploy Calico based on the custom resource
kubectl apply -f custom-resources.yaml





